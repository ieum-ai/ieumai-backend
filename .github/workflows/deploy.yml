# .github/workflows/deploy.yml

name: Deploy to EC2 on main push

on:
  push:
    branches:
      - main

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest

    steps:
    # 1. EC2에서 백업, 코드 업데이트 및 빌드 실행 (Actions 로그에 출력)
    - name: Backup, Pull, and Build on EC2
      id: build
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        # !!! 중요 !!!: 이 스크립트 실행 전 EC2 인스턴스에서 권한 문제를 먼저 해결해야 합니다!
        # 예: sudo chown -R ec2-user:ec2-user /home/ec2-user/ieumai-backend
        script: |
          WORK_DIR="/home/ec2-user/ieumai-backend"
          BRANCH_NAME="main"
          JAR_NAME="ieumai-backend-0.0.1-SNAPSHOT.jar"
          PLAIN_JAR_NAME="ieumai-backend-0.0.1-SNAPSHOT-plain.jar"
          JAR_PATH="./build/libs/$JAR_NAME" # cd 이후 상대 경로
          BACKUP_JAR_PATH="$JAR_PATH.bak"
          PLAIN_JAR_PATH="./build/libs/$PLAIN_JAR_NAME" # cd 이후 상대 경로
          BACKUP_PLAIN_JAR_PATH="$PLAIN_JAR_PATH.bak"

          echo "=== Starting Backup, Pull, and Build on EC2 ==="
          echo "Working directory: $WORK_DIR"
          cd $WORK_DIR || exit 1 # cd 실패 시 스크립트 중단

          echo "[1/5] Backing up existing artifacts..."
          # 이전 백업 파일이 있다면 조용히 삭제 (덮어쓰기 방지)
          rm -f "$BACKUP_JAR_PATH"
          rm -f "$BACKUP_PLAIN_JAR_PATH"

          # 현재 JAR 파일 백업 (존재하는 경우에만)
          if [ -f "$JAR_PATH" ]; then
            echo "Backing up $JAR_PATH to $BACKUP_JAR_PATH"
            # mv 명령 실패 시 스크립트 중단 (권한 문제 등)
            mv "$JAR_PATH" "$BACKUP_JAR_PATH" || exit 1
          else
            echo "$JAR_PATH not found, skipping backup."
          fi
          if [ -f "$PLAIN_JAR_PATH" ]; then
            echo "Backing up $PLAIN_JAR_PATH to $BACKUP_PLAIN_JAR_PATH"
            mv "$PLAIN_JAR_PATH" "$BACKUP_PLAIN_JAR_PATH" || exit 1
          else
            echo "$PLAIN_JAR_PATH not found, skipping backup."
          fi
          echo "Backup complete."

          echo "[2/5] Pulling latest code from Git repository ($BRANCH_NAME branch)..."
          # git pull 실패 시 스크립트 중단
          git pull origin $BRANCH_NAME || exit 1
          echo "Pull complete."

          echo "[3/5] Ensuring Gradle wrapper is executable..."
          if [ ! -x ./gradlew ]; then
              echo "Warning: ./gradlew does not have execute permissions. Granting permissions."
              # chmod 실패 시 스크립트 중단
              chmod +x ./gradlew || exit 1
          else
              echo "./gradlew is already executable."
          fi

          echo "[4/5] Building the project using Gradle..."
          # Gradle 빌드 실행. 실패 시 non-zero exit code 반환됨.
          ./gradlew build
          BUILD_EXIT_CODE=$? # 빌드 종료 코드 캡처

          # 빌드 실패 시 처리
          if [ $BUILD_EXIT_CODE -ne 0 ]; then
              echo "Error: Gradle build failed with exit code $BUILD_EXIT_CODE."
              echo "Deployment aborted. Backup files ($BACKUP_JAR_PATH, $BACKUP_PLAIN_JAR_PATH) remain."
              # 필요 시 여기서 백업 복원 로직 추가 가능
              # 예: mv "$BACKUP_JAR_PATH" "$JAR_PATH"
              exit $BUILD_EXIT_CODE # 실패 종료 코드로 스크립트 종료 -> Actions 단계 실패
          fi
          echo "Build successful."

          # 빌드 성공 시 백업 파일 삭제
          echo "[5/5] Build successful. Removing backup artifacts..."
          if [ -f "$BACKUP_JAR_PATH" ]; then
              rm -f "$BACKUP_JAR_PATH"
              echo "Removed $BACKUP_JAR_PATH"
          fi
          if [ -f "$BACKUP_PLAIN_JAR_PATH" ]; then
              rm -f "$BACKUP_PLAIN_JAR_PATH"
              echo "Removed $BACKUP_PLAIN_JAR_PATH"
          fi

          echo "=== Backup, Pull, and Build on EC2 Finished Successfully ==="

    # 2. EC2 Screen 세션 관리 및 Java 앱 실행 (위 'build' 단계 성공 시에만 실행됨)
    - name: Manage Screen Session and Run Java App
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST_IP }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        port: 22
        script: |
          WORK_DIR="/home/ec2-user/ieumai-backend"
          # 실행할 *새* JAR 파일의 전체 경로 (백업 이름 아님)
          JAR_PATH="$WORK_DIR/build/libs/ieumai-backend-0.0.1-SNAPSHOT.jar"
          SESSION_NAME="ieumai-backend"

          # 1. 기존 세션 확인 및 종료
          echo "Checking for existing screen session: $SESSION_NAME"
          if screen -ls | grep -q "\.$SESSION_NAME\s"; then
            echo "Existing session found. Terminating process and session..."
            # 필요시 pkill 등으로 Java 프로세스 확실히 종료
            # pkill -f ieumai-backend-0.0.1-SNAPSHOT.jar || echo "Java process not found or already stopped."
            # sleep 2
            screen -S $SESSION_NAME -X quit
            sleep 1
            echo "Existing session terminated command sent."
          else
            echo "No existing session found."
          fi

          # 2. 새 세션 생성
          echo "Creating new detached screen session: $SESSION_NAME"
          screen -S $SESSION_NAME -d -m

          # 3. 새 세션에 Java 앱 실행 명령어 전송 (새로 빌드된 JAR 사용)
          COMMAND_TO_RUN="cd $WORK_DIR && java -jar $JAR_PATH"
          echo "Sending command to new session: $COMMAND_TO_RUN"

          # 실행 전 새 JAR 파일이 실제로 존재하는지 확인
          if [ ! -f "$JAR_PATH" ]; then
              echo "Error: New JAR file $JAR_PATH not found! Cannot start application."
              exit 1 # 단계 실패 처리
          fi
          screen -S $SESSION_NAME -X stuff "$COMMAND_TO_RUN$(printf '\r')"

          echo "Java application start command sent successfully to $SESSION_NAME."
